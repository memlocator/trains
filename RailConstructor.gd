@tool
extends Path3D

var meshes = []
@export_range(1, 6) var segment_dist: float = 1:
	set(new_dist):
		segment_dist = new_dist
		spawn_blocks()

func _on_curve_changed():
	spawn_blocks()

func debug_point(transform):
	var mesh = MeshInstance3D.new()
	mesh.mesh = BoxMesh.new()
	self.add_child(mesh)
	meshes.append(mesh)
	mesh.transform = transform
	mesh.scale = Vector3(0.7,0.025,0.1)

func clear_sleepers():
	for mesh in meshes:
		mesh.queue_free()
	meshes.clear()

func spawn_blocks():
	clear_sleepers()

	var segment_dist = segment_dist
	var curve_length = curve.get_baked_length()
	var segment_count = curve_length/segment_dist
	for i in range(0, segment_count*100, segment_dist):
		#var position = curve.sample_baked()
		var transform_center = curve.sample_baked_with_rotation((float(i)/100) * curve.get_baked_length(), true)
		var right_vec = transform_center.basis.x
		var left_vec = -transform_center.basis.x
		
		#debug_point(transform_center.position + right_vec)
		#debug_point(transform_center.position + left_vec)
		#debug_point(Transform3D(transform_center).translated_local(Vector3(-1, 0, 0)))
		#debug_point(Transform3D(transform_center).translated_local(Vector3(1, 0, 0)))
		debug_point(transform_center)

func generate_track_mesh(horizontal_offset):
	var arr = PackedVector2Array([Vector2(-0.7923468947410583, -0.0031647791620343924), Vector2(-0.7923470139503479, -0.07024983316659927), Vector2(-0.7923470139503479, -0.07024983316659927), Vector2(-0.39617350697517395, -0.07024992257356644), Vector2(-0.39617350697517395, -0.07024992257356644), Vector2(-3.756487444240078e-14, -0.0702500119805336), Vector2(-3.756487444240078e-14, -0.0702500119805336), Vector2(0.39617350697517395, -0.07024992257356644), Vector2(0.39617350697517395, -0.07024992257356644), Vector2(0.7923470139503479, -0.07024983316659927), Vector2(0.7923470139503479, -0.07024983316659927), Vector2(0.7923470139503479, -0.003164831316098571), Vector2(0.7923470139503479, -0.003164831316098571), Vector2(0.7923470139503479, 0.06392016261816025), Vector2(0.7923470139503479, 0.06392016261816025), Vector2(0.7343460321426392, 0.07994666695594788), Vector2(0.7343460321426392, 0.07994666695594788), Vector2(0.6763449907302856, 0.09597316384315491), Vector2(0.6763449907302856, 0.09597316384315491), Vector2(0.3989979922771454, 0.11886816471815109), Vector2(0.3989979922771454, 0.11886816471815109), Vector2(0.12165100127458572, 0.14176316559314728), Vector2(0.12165100127458572, 0.14176316559314728), Vector2(0.12058250606060028, 0.5042691826820374), Vector2(0.12058250606060028, 0.5042691826820374), Vector2(0.11951400339603424, 0.8667751550674438), Vector2(0.11951400339603424, 0.8667751550674438), Vector2(0.14515650272369385, 0.8933336734771729), Vector2(0.14515650272369385, 0.8933336734771729), Vector2(0.17079900205135345, 0.9198921918869019), Vector2(0.17079900205135345, 0.9198921918869019), Vector2(0.29534849524497986, 0.958355724811554), Vector2(0.29534849524497986, 0.958355724811554), Vector2(0.41989800333976746, 0.9968191981315613), Vector2(0.41989800333976746, 0.9968191981315613), Vector2(0.4391300082206726, 1.0096397399902344), Vector2(0.4391300082206726, 1.0096397399902344), Vector2(0.45836201310157776, 1.0224602222442627), Vector2(0.45836201310157776, 1.0224602222442627), Vector2(0.4583619236946106, 1.1224602460861206), Vector2(0.4583619236946106, 1.1224602460861206), Vector2(0.4583618640899658, 1.2224602699279785), Vector2(0.4583618640899658, 1.2224602699279785), Vector2(0.4363824129104614, 1.2362003326416016), Vector2(0.4363824129104614, 1.2362003326416016), Vector2(0.4144029915332794, 1.249940276145935), Vector2(0.4144029915332794, 1.249940276145935), Vector2(0.3731920123100281, 1.257265329360962), Vector2(0.3731920123100281, 1.257265329360962), Vector2(0.33198100328445435, 1.2645902633666992), Vector2(0.33198100328445435, 1.2645902633666992), Vector2(0.16599050164222717, 1.2645902633666992), Vector2(0.16599050164222717, 1.2645902633666992), Vector2(-3.756487444240078e-14, 1.2645902633666992), Vector2(-3.756487444240078e-14, 1.2645902633666992), Vector2(-0.1659904420375824, 1.264589548110962), Vector2(-0.1659904420375824, 1.264589548110962), Vector2(-0.3319808840751648, 1.2645889520645142), Vector2(-0.3319808840751648, 1.2645889520645142), Vector2(-0.37319207191467285, 1.2572624683380127), Vector2(-0.37319207191467285, 1.2572624683380127), Vector2(-0.4144032597541809, 1.2499361038208008), Vector2(-0.4144032597541809, 1.2499361038208008), Vector2(-0.43638256192207336, 1.2361990213394165), Vector2(-0.43638256192207336, 1.2361990213394165), Vector2(-0.4583618640899658, 1.2224619388580322), Vector2(-0.4583618640899658, 1.2224619388580322), Vector2(-0.4583618640899658, 1.1224619150161743), Vector2(-0.4583618640899658, 1.1224619150161743), Vector2(-0.4583618640899658, 1.0224618911743164), Vector2(-0.4583618640899658, 1.0224618911743164), Vector2(-0.4391299784183502, 1.0096406936645508), Vector2(-0.4391299784183502, 1.0096406936645508), Vector2(-0.4198980927467346, 0.9968193173408508), Vector2(-0.4198980927467346, 0.9968193173408508), Vector2(-0.29534873366355896, 0.9583555459976196), Vector2(-0.29534873366355896, 0.9583555459976196), Vector2(-0.1707993894815445, 0.9198917746543884), Vector2(-0.1707993894815445, 0.9198917746543884), Vector2(-0.1451568752527237, 0.8933334946632385), Vector2(-0.1451568752527237, 0.8933334946632385), Vector2(-0.11951436847448349, 0.8667751550674438), Vector2(-0.11951436847448349, 0.8667751550674438), Vector2(-0.12058280408382416, 0.5042694211006165), Vector2(-0.12058280408382416, 0.5042694211006165), Vector2(-0.12165124714374542, 0.1417636126279831), Vector2(-0.12165124714374542, 0.1417636126279831), Vector2(-0.39899808168411255, 0.11886851489543915), Vector2(-0.39899808168411255, 0.11886851489543915), Vector2(-0.6763449311256409, 0.0959734097123146), Vector2(-0.6763449311256409, 0.0959734097123146), Vector2(-0.7343458533287048, 0.0799468383193016), Vector2(-0.7343458533287048, 0.0799468383193016), Vector2(-0.7923467755317688, 0.0639202669262886), Vector2(-0.7923467755317688, 0.0639202669262886), Vector2(-0.7923468947410583, -0.0031647791620343924)])
	var scaling_matrix = Transform2D()
	scaling_matrix = scaling_matrix.scaled(Vector2(0.1,0.1))
	
	for idx in arr.size():
		var scaled_vector = Vector2(horizontal_offset, 0)
		arr[idx] += scaled_vector
		arr[idx] *= scaling_matrix
	
	
	var node = CSGPolygon3D.new()#get_node("RailCSGPolygon")#.vertices = arr#.vertices = arr
	node.mode = CSGPolygon3D.MODE_PATH
	node.path_node = self.get_path()
	add_child(node)
	node.polygon = arr
	node.smooth_faces = true
	
# Called when the node enters the scene tree for the first time.
func _ready():
	generate_track_mesh(3)
	generate_track_mesh(-3)
	clear_sleepers()
	#var arr = generate_vec2Array()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass
